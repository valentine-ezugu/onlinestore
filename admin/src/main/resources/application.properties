server.port=8081
server.context-path=/adminportal

# ===============================
# = DATA SOURCE
# ===============================
spring.h2.console.enabled=true

security.basic.enabled=false
management.security.enabled=false
#FOR TEST WITH H2

jdbc.driverClassName=org.h2.Driver
spring.datasource.url=jdbc:h2:~/test;DB_CLOSE_ON_EXIT=FALSE;AUTO_SERVER=TRUE
spring.datasource.username=sa
spring.datasource.password=

spring.jpa.hibernate.ddl-auto=update


spring.jpa.show-sql=true
spring.jpa.hibernate.format_sql=true 

hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.thymeleaf.cache = false
#Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect



logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=ERROR


#FOR MY SQL BELOW


# Set here configurations for the database connection
#spring.datasource.url=jdbc:mysql://localhost:3306/bookstoredb

# Username and secret
#spring.datasource.username=root
#spring.datasource.password=user

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1


# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

# Show or not log for each sql query
#spring.jpa.show-sql=true

 #Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
 #spring.jpa.hibernate.ddl-auto = update

# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect